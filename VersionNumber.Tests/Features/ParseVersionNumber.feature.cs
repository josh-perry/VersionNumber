// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace VersionNumber.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Parse Version Number")]
    public partial class ParseVersionNumberFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ParseVersionNumber.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Parse Version Number", "    Parse version number from a provided string", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parse version number from a string")]
        [NUnit.Framework.TestCaseAttribute("\"1.0.1.5\"", "1", "5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"1.0.2.4\"", "2", "4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"1.0.3.3\"", "3", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"1.0.4.2\"", "4", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"1.0.5.1\"", "5", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"0.0.1.5\"", "1", "5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"0.0.2.4\"", "2", "4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"0.0.3.3\"", "3", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"0.0.4.2\"", "4", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"0.0.5.1\"", "5", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"10.0.111.5\"", "111", "5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"10.0.112.4\"", "112", "4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"10.0.113.3\"", "113", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"10.0.114.2\"", "114", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"10.0.115.1\"", "115", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("\"10.0.115.1024\"", "115", "1024", new string[0])]
        public virtual void ParseVersionNumberFromAString(string parseable, string major, string minor, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse version number from a string", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
    testRunner.Given(string.Format("Version number to be parsed is {0}", parseable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
    testRunner.When("It is parsed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
    testRunner.Then(string.Format("The major version should be {0}", major), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
    testRunner.Then(string.Format("The minor version should be {0}", minor), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
